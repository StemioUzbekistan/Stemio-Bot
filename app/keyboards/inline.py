from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_calendar import SimpleCalendar

from app.utils.locations import CITIES_RU, CITIES_UZ

# --- –û–ë–©–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_language_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá∫üáø O ªzbek", callback_data="lang_uz")
    )
    return builder.as_markup()

def get_role_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-parent'], callback_data="role_parent"),
        InlineKeyboardButton(text=lexicon[lang]['button-student'], callback_data="role_student")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_lang_select"))
    return builder.as_markup()

def get_profile_creation_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-yes-create-profile'], callback_data="create_profile")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-later'], callback_data="postpone_creation")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_role_select"))
    return builder.as_markup()

def get_city_keyboard(lang: str):
    cities_list = CITIES_UZ if lang == 'uz' else CITIES_RU
    builder = InlineKeyboardBuilder()
    for city in cities_list:
        builder.add(InlineKeyboardButton(text=city, callback_data=f"city_{city}"))
    builder.adjust(2)
    builder.row(types.InlineKeyboardButton(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="manual_city_input"))
    return builder.as_markup()

async def get_calendar_with_manual_input_keyboard(lexicon: dict, lang: str):
    calendar_markup = await SimpleCalendar().start_calendar(year=2010)
    manual_input_button = InlineKeyboardButton(
        text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é",
        callback_data="manual_dob_input"
    )
    calendar_markup.inline_keyboard.append([manual_input_button])
    return calendar_markup


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –°–¶–ï–ù–ê–†–ò–ï–í ---

def get_skip_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-skip'], callback_data="skip_email")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_phone_input"))
    return builder.as_markup()

def get_profile_confirmation_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-confirm'], callback_data="confirm_profile"),
        InlineKeyboardButton(text=lexicon[lang]['button-edit'], callback_data="edit_profile")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_email_input"))
    return builder.as_markup()

def get_add_child_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-add-child'], callback_data="add_child")
    ).row(
        InlineKeyboardButton(
            text=lexicon[lang]['button-not-add-child-yet'], 
            callback_data="finish_registration"
        )
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_profile_confirmation"))
    return builder.as_markup()

def get_interests_keyboard(lexicon: dict, lang: str, chosen_interests: set = None) -> InlineKeyboardMarkup:
    """(–ò–°–ü–†–ê–í–õ–ï–ù–û) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    if chosen_interests is None:
        chosen_interests = set()
    
    builder = InlineKeyboardBuilder()
    
    interest_keys = lexicon[lang]['interest-benefits'].keys()
    
    for interest_key in interest_keys:
        interest_text = lexicon[lang].get(f'button-{interest_key}', interest_key.capitalize())
        emoji = "‚úÖ" if interest_key in chosen_interests else "‚ö™Ô∏è"
        builder.row(InlineKeyboardButton(
            text=f"{emoji} {interest_text}", 
            callback_data=f"interest_{interest_key}"
        ))

    builder.row(
        InlineKeyboardButton(
            text=lexicon[lang]['button-back'], 
            callback_data="back_to_class_input" 
        ),
        InlineKeyboardButton(
            text=lexicon[lang].get('button-done', '–ì–æ—Ç–æ–≤–æ'),
            callback_data="interests_done"
        )
    )  
    return builder.as_markup()

def get_child_confirmation_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-confirm'], callback_data="confirm_child")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-add-another-child'], callback_data="add_another_child")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-go-to-main-menu'], callback_data="main_menu")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_interests"))
    return builder.as_markup()

def get_quick_benefit_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-find-courses'], callback_data="find_courses"),
        InlineKeyboardButton(text=lexicon[lang]['button-go-to-main-menu'], callback_data="main_menu")
    )
    return builder.as_markup()

def get_student_welcome_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-yes-lets-go'], callback_data="student_create_profile")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-later'], callback_data="postpone_registration")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_role_select"))
    return builder.as_markup()

def get_student_goal_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-goal-university'], callback_data="goal_university"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-goal-grades'], callback_data="goal_grades"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-goal-profession'], callback_data="goal_profession"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-goal-explore'], callback_data="goal_explore"))
    return builder.as_markup()

def get_student_skip_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-skip'], callback_data="skip_parent_contact"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_phone_input"))
    return builder.as_markup()

def get_student_profile_confirmation_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-confirm'], callback_data="student_confirm_profile"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-edit'], callback_data="student_edit_profile"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_parent_contact"))
    return builder.as_markup()

def get_improve_grades_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-find-subject-courses'], callback_data="find_subject_courses")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-see-ai-assistant'], callback_data="see_ai_assistant")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_goal_select")
    )
    return builder.as_markup()
    
def get_explore_courses_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-show-intro-courses'], callback_data="show_intro_courses")
    ).row(
        InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_goal_select")
    )
    return builder.as_markup()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---

def get_profile_keyboard(lexicon: dict, lang: str, is_parent: bool):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-edit-profile'], callback_data="edit_profile_action"))
    if is_parent:
        builder.row(InlineKeyboardButton(text=lexicon[lang]['button-manage-children'], callback_data="manage_children_action"))
    else:
        builder.row(InlineKeyboardButton(text=lexicon[lang]['button-my-courses'], callback_data="my_courses_action"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_main_menu"))
    return builder.as_markup()
    

def get_edit_profile_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ò–º—è", callback_data="edit_field_parent_–ò–º—è"))
    builder.row(InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_field_parent_–§–∞–º–∏–ª–∏—è"))
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-edit-phone'], callback_data="edit_field_parent_–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω"),
        InlineKeyboardButton(text=lexicon[lang]['button-edit-email'], callback_data="edit_field_parent_Email")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_profile_view"))
    return builder.as_markup()

    
def get_student_edit_profile_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ò–º—è", callback_data="edit_field_student_–ò–º—è"),
        InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_field_student_–§–∞–º–∏–ª–∏—è")
    )
    builder.row(
        InlineKeyboardButton(text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_field_student_–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"),
        InlineKeyboardButton(text=lexicon[lang]['button-edit-city'], callback_data="edit_field_student_–ì–æ—Ä–æ–¥")
    )
    builder.row(
        InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field_student_–¢–µ–ª–µ—Ñ–æ–Ω"),
        InlineKeyboardButton(text=lexicon[lang]['button-edit-parent-contact'], callback_data="edit_field_student_–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è") # –ü—Ä–∏–º–µ—Ä, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_profile_view"))
    return builder.as_markup()


def get_edit_profile_choices_keyboard(lexicon: dict, lang: str, is_parent: bool):
    if is_parent:
        return get_edit_profile_keyboard(lexicon, lang)
    else:
        return get_student_edit_profile_keyboard(lexicon, lang)


def get_children_list_keyboard(children: list, lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    for index, child in enumerate(children):
        child_name = f"{child.get('–ò–º—è —Ä–µ–±–µ–Ω–∫–∞', '')} {child.get('–§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞', '')}".strip()
        if not child_name:
            child_name = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        builder.row(InlineKeyboardButton(
            text=child_name, 
            callback_data=f"view_child_{index}" 
        ))
        
    builder.row(InlineKeyboardButton(
        text=lexicon[lang]['button-back'], 
        callback_data="back_to_profile_view"
    ))
    return builder.as_markup()


def get_back_to_children_list_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_children_list"))
    return builder.as_markup()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø STEM-–ù–ê–í–ò–ì–ê–¢–û–†–ê ---

def get_start_test_keyboard(lexicon: dict, lang: str, from_profession_branch: bool = False):
    builder = InlineKeyboardBuilder()
    start_button_text = lexicon[lang]['button-pass-test'] if from_profession_branch else lexicon[lang]['button-start-test-now']
    builder.row(InlineKeyboardButton(text=start_button_text, callback_data="start_test_now"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-do-it-later'], callback_data="postpone_action"))
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_goal_select"))
    return builder.as_markup()

def get_about_test_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-start-test'], callback_data="begin_stem_test"),
        InlineKeyboardButton(text=lexicon[lang]['button-cancel'], callback_data="postpone_action")
    )
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="postpone_action"))
    return builder.as_markup()

def get_subcategories_keyboard(subcategories: dict, scale_key: str):
    builder = InlineKeyboardBuilder()
    for subcat_key, subcat_value in subcategories.items():
        builder.row(InlineKeyboardButton(text=subcat_value['title'], callback_data=f"subcat_{scale_key}_{subcat_key}"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"))
    return builder.as_markup()

def get_professions_list_keyboard(professions: list, scale_key: str, subcat_key: str):
    builder = InlineKeyboardBuilder()
    for i, prof in enumerate(professions):
        builder.row(InlineKeyboardButton(text=prof['title'], callback_data=f"prof_{scale_key}_{subcat_key}_{i}"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"view_professions_{scale_key}"))
    return builder.as_markup()

def get_profession_card_keyboard(website_link: str, scale_key: str, subcat_key: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîó –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞ —Å–∞–π—Ç–µ", url=website_link))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data=f"subcat_{scale_key}_{subcat_key}"))
    return builder.as_markup()


def get_yes_no_keyboard(lexicon: dict, lang: str, yes_callback: str = "yes", no_callback: str = "no"):
    """Creates a universal Yes/No keyboard with customizable callback_data."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon[lang]['button-yes'], callback_data=yes_callback),
        InlineKeyboardButton(text=lexicon[lang]['button-no'], callback_data=no_callback)
    )
    return builder.as_markup()

def get_consent_keyboard(lexicon: dict, lang: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ Exode."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=lexicon[lang]['button-yes-create-exode'],
            callback_data="consent_yes"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=lexicon[lang]['button-later'], 
            callback_data="consent_no"
        )
    )
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–ó–î–ï–õ–û–í –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---

def get_section_keyboard(lexicon: dict, lang: str, section: str, is_parent: bool = False): 
    builder = InlineKeyboardBuilder()
    
    if section == 'navigator':
        callback_data = "parent_start_test_selection" if is_parent else "student_start_test_info"
        builder.row(InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=callback_data))
    
    elif section == 'programs':
        builder.row(InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤", callback_data="action_view_courses"))
    elif section == 'ai_assistant':
        builder.row(InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", callback_data="action_ask_ai"))
    elif section == 'universities':
        builder.row(InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –≤—É–∑ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="action_filter_unis"))
    elif section == 'my_children':
        builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞", callback_data="action_add_child"))
    
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_main_menu"))
    return builder.as_markup()

def add_back_button(builder: InlineKeyboardBuilder, lexicon: dict, lang: str, callback_data: str = "back"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    builder.row(InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data=callback_data))
    return builder


def get_parent_start_test_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=lexicon[lang]['button-start-test'], 
        callback_data="begin_stem_test"
    ))
    builder.row(InlineKeyboardButton(
        text=lexicon[lang]['button-later'], 
        callback_data="back_to_main_menu"
    ))
    return builder.as_markup()

# --- 1. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ö–∞—Ç–µ–≥–æ—Ä–∏–π (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞) ---
def get_course_categories_keyboard(categories: list, lexicon: dict, lang: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞)."""
    builder = InlineKeyboardBuilder()
    for cat in sorted(categories):
        builder.row(types.InlineKeyboardButton(text=cat, callback_data=f"category_{cat}"))
    builder.row(types.InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_main_menu"))
    return builder.as_markup()


# --- 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (Python, C++) ---
def get_course_subcategories_keyboard(subcategories: list, lexicon: dict, lang: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (Python, C++, Web)."""
    builder = InlineKeyboardBuilder()
    for subcat in sorted(subcategories):
        builder.row(types.InlineKeyboardButton(text=subcat, callback_data=f"subcategory_{subcat}"))
    builder.row(types.InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_categories"))
    return builder.as_markup()


# --- 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ö—É—Ä—Å–æ–≤ (Python –ë–∞–∑–æ–≤—ã–π, Python –°—Ä–µ–¥–Ω–∏–π) ---
def get_specific_courses_keyboard(courses: list, lexicon: dict, lang: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."""
    builder = InlineKeyboardBuilder()
    for i, course in enumerate(courses):
        builder.row(types.InlineKeyboardButton(text=course['–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞'], callback_data=f"course_{i}"))
    builder.row(types.InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_subcategories"))
    return builder.as_markup()

def get_course_card_keyboard(lexicon: dict, lang: str, course_id: str):
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É—Ä—Å–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å",
        callback_data=f"enroll_{course_id}"
    ))
    builder.row(types.InlineKeyboardButton(
        text=lexicon[lang]['button-back'],
        callback_data="back_to_subcategories" 
    ))
    return builder.as_markup()
