from aiogram import Router, F, types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.states.registration import Universities 
from app.utils.google_sheets import UniversitiesGSheet
from app.utils.locations import CITIES_RU 
from app.core.config import PRIVATE_UNIVERSITIES_SHEET_ID, FOREIGN_UNIVERSITIES_SHEET_ID

router = Router()
ITEMS_PER_PAGE = 5 

# –ü–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
VISIBLE_PROGRAM_FIELDS = [ 
    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è", "–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è", 
    "–≠–∫–∑–∞–º–µ–Ω—ã", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ü—Ä–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", 
    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ó–∞–æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–í–µ—á–µ—Ä–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ", "–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ", 
    "–°—Ç–∏–ø–µ–Ω–¥–∏—è", "–ù–∞–ª–∏—á–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç", "–ö–≤–æ—Ç–∞ –Ω–∞ –±—é–¥–∂–µ—Ç", "–ö–≤–æ—Ç–∞ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" 
]

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_cities_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    for city_name in CITIES_RU:
        builder.row(types.InlineKeyboardButton(text=city_name, callback_data=f"uni_city_{city_name}"))
    builder.row(types.InlineKeyboardButton(text=lexicon.get(lang, {}).get('button-back', 'Back'), callback_data="back_to_main_menu"))
    return builder.as_markup()

def get_uni_types_keyboard(lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üéì –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ", callback_data="uni_type_–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π"))
    builder.row(types.InlineKeyboardButton(text="üè¢ –ß–∞—Å—Ç–Ω—ã–µ", callback_data="uni_type_–ß–∞—Å—Ç–Ω—ã–π"))
    builder.row(types.InlineKeyboardButton(text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ", callback_data="uni_type_–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"))
    builder.row(types.InlineKeyboardButton(text=lexicon.get(lang, {}).get('button-back', 'Back'), callback_data="back_to_cities"))
    return builder.as_markup()

def get_paginated_keyboard(items: list, page: int, data_prefix: str, back_callback: str, lexicon: dict, lang: str):
    builder = InlineKeyboardBuilder()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    
    current_page_items = items[start_index:end_index]
    
    for item_name in current_page_items:
        try:
            actual_index = items.index(item_name, start_index, end_index + len(items))
        except ValueError:
            actual_index = start_index + current_page_items.index(item_name) 

        builder.row(types.InlineKeyboardButton(text=str(item_name), callback_data=f"{data_prefix}_{actual_index}"))
        
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{data_prefix}_{page - 1}"))
    if end_index < len(items):
        nav_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{data_prefix}_{page + 1}"))
    
    if nav_buttons: builder.row(*nav_buttons)
    builder.row(types.InlineKeyboardButton(text=lexicon.get(lang, {}).get('button-back', 'Back'), callback_data=back_callback))
    return builder.as_markup()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@router.message(F.text.in_({"üéì –í—É–∑—ã", "üéì OTMlar"}))
async def universities_start_handler(message: types.Message, state: FSMContext, lexicon: dict):
    await message.delete()
    user_data = await state.get_data()
    if menu_msg_id := user_data.get('main_menu_message_id'):
        try:
            await message.bot.delete_message(message.chat.id, menu_msg_id)
        except Exception:
            pass
    
    lang = (await state.get_data()).get('language', 'ru')
    await state.set_state(Universities.choosing_city)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_cities_keyboard(lexicon, lang))

@router.callback_query(Universities.choosing_city, F.data.startswith("uni_city_"))
async def city_selected_handler(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    lexicon: dict, 
    state_uni_ids_by_city: dict
):
    selected_city = callback.data.split('_', 2)[2]
    lang = (await state.get_data()).get('language', 'ru')
    
    state_uni_ids = state_uni_ids_by_city

    if not state_uni_ids.get(selected_city) and not PRIVATE_UNIVERSITIES_SHEET_ID and not FOREIGN_UNIVERSITIES_SHEET_ID:
         await callback.answer(f"–í –≥. {selected_city} –≤—É–∑—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
         return
            
    await state.update_data(selected_city=selected_city)
    await state.set_state(Universities.choosing_uni_type)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {selected_city}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—É–∑–∞:",
        reply_markup=get_uni_types_keyboard(lexicon, lang)
    )
    await callback.answer()

@router.callback_query(Universities.choosing_uni_type, F.data.startswith("uni_type_"))
async def uni_type_selected_handler(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    lexicon: dict, 
    universities_manager: UniversitiesGSheet, 
    state_uni_ids_by_city: dict
):
    selected_type = callback.data.split('_', 2)[2] 
    user_data = await state.get_data()
    selected_city = user_data.get("selected_city")
    lang = user_data.get('language', 'ru')
    
    selected_sheet_id = None
    
    if selected_type == "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π":
        state_uni_ids = state_uni_ids_by_city
        selected_sheet_id = state_uni_ids.get(selected_city)
        if not selected_sheet_id:
            await callback.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥–æ—Å. –≤—É–∑–æ–≤ –≤ –≥. {selected_city}.", show_alert=True)
            return
    
    elif selected_type == "–ß–∞—Å—Ç–Ω—ã–π":
        selected_sheet_id = PRIVATE_UNIVERSITIES_SHEET_ID
    
    elif selected_type == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π":
        selected_sheet_id = FOREIGN_UNIVERSITIES_SHEET_ID
        
    if not selected_sheet_id:
        await callback.answer(f"–û—à–∏–±–∫–∞: ID —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è '{selected_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env", show_alert=True)
        return

    city_filter = selected_city if selected_type in ["–ß–∞—Å—Ç–Ω—ã–π", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"] else None
    
    all_universities_in_file = universities_manager.get_universities_by_city_and_type(
        sheet_id=selected_sheet_id,
        city=city_filter 
    )

    if not all_universities_in_file:
        await callback.answer(f"–í –≥. {selected_city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—É–∑—ã —Ç–∏–ø–∞ '{selected_type}'.", show_alert=True)
        return
        
    await state.set_state(Universities.choosing_university)
    await state.update_data(
        page=0, 
        uni_type=selected_type, 
        current_sheet_id=selected_sheet_id, 
        filtered_universities=all_universities_in_file
    )
    
    uni_names = [uni.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£", "N/A") for uni in all_universities_in_file]
    
    await callback.message.edit_text(
        f"<b>{selected_city} / {selected_type}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—É–∑:",
        reply_markup=get_paginated_keyboard(
            items=uni_names, page=0, data_prefix="uni", back_callback="back_to_uni_type", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()

@router.callback_query(Universities.choosing_university, F.data.startswith("uni_"))
async def university_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, universities_manager: UniversitiesGSheet):
    university_index = int(callback.data.split('_')[1])
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    
    selected_university = user_data.get("filtered_universities", [])[university_index]
    
    sheet_name = selected_university.get('sheet_name')
    if not sheet_name:
        await callback.answer(f"–û—à–∏–±–∫–∞: –î–ª—è –í–£–ó–∞ '{selected_university.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£')}' –Ω–µ —É–∫–∞–∑–∞–Ω 'sheet_name' –≤ —Ç–∞–±–ª–∏—Ü–µ.", show_alert=True)
        return

    all_programs = universities_manager.get_faculties_by_sheet_name(sheet_name)
    
    if not all_programs:
        await callback.answer(f"–î–ª—è —ç—Ç–æ–≥–æ –≤—É–∑–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã (–Ω–∞ –ª–∏—Å—Ç–µ '{sheet_name}') –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return
        
    unique_faculties = sorted(list(set(
        p.get("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞") for p in all_programs if p.get("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞")
    )))
    
    if not unique_faculties:
         await callback.answer(f"–í —Ç–∞–±–ª–∏—Ü–µ '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞' –∏–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
         return
    
    await state.update_data(
        all_programs=all_programs, 
        unique_faculties=unique_faculties, 
        selected_university_index=university_index
    )
    await state.set_state(Universities.choosing_faculty)
    
    await callback.message.edit_text(
        f"<b>{selected_university.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£')}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=get_paginated_keyboard(
            items=unique_faculties, page=0, data_prefix="faculty", back_callback="back_to_universities", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()


@router.callback_query(Universities.choosing_faculty, F.data.startswith("faculty_"))
async def faculty_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    faculty_index = int(callback.data.split('_')[1])
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    
    selected_faculty_name = user_data.get("unique_faculties", [])[faculty_index]
    all_programs = user_data.get("all_programs", [])
    
    programs_in_faculty = [
        p for p in all_programs 
        if p.get("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞") == selected_faculty_name
    ]
    
    program_names = [p.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "N/A") for p in programs_in_faculty]
    
    await state.update_data(
        programs_in_faculty=programs_in_faculty, 
        selected_faculty_index=faculty_index
    )
    await state.set_state(Universities.choosing_program)
    
    await callback.message.edit_text(
        f"<b>{selected_faculty_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=get_paginated_keyboard(
            items=program_names, page=0, data_prefix="program", back_callback="back_to_faculties", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()

@router.callback_query(Universities.choosing_program, F.data.startswith("program_"))
async def program_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    program_index = int(callback.data.split('_')[1])
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    
    program = user_data.get("programs_in_faculty", [])[program_index]
    
    if not program:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.", show_alert=True)
        return

    await state.set_state(Universities.viewing_faculty) 
    
    card_parts = [f"<b>{program.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')}</b>\n"]
    for field_name in VISIBLE_PROGRAM_FIELDS:
        if field_name == "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": continue 
        value = program.get(field_name)
        if value: 
            card_parts.append(f"<b>{field_name}:</b> {value}")
            
    card_text = "\n".join(card_parts)
    
    builder = InlineKeyboardBuilder()
    if program.get("–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"):
        builder.row(types.InlineKeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data=f"show_docs_{program_index}"))

    builder.row(types.InlineKeyboardButton(text=lexicon[lang]['button-back'], callback_data="back_to_faculties"))
    
    await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
    await callback.answer()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò "–ù–ê–ó–ê–î" ---

@router.callback_query(F.data == "back_to_cities")
async def back_to_cities_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    lang = (await state.get_data()).get('language', 'ru')
    await state.set_state(Universities.choosing_city)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", 
        reply_markup=get_cities_keyboard(lexicon, lang)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_uni_type")
async def back_to_uni_type_handler(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    lexicon: dict, 
):

    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    selected_city = user_data.get("selected_city")

    await state.set_state(Universities.choosing_uni_type)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {selected_city}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—É–∑–∞:",
        reply_markup=get_uni_types_keyboard(lexicon, lang)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_universities")
async def back_to_universities_handler(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    lexicon: dict, 
):

    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    selected_city = user_data.get("selected_city")
    selected_type = user_data.get("uni_type")
    all_universities_in_file = user_data.get("filtered_universities", [])
    
    uni_names = [uni.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£", "N/A") for uni in all_universities_in_file]
    
    await state.set_state(Universities.choosing_university)
    await callback.message.edit_text(
        f"<b>{selected_city} / {selected_type}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—É–∑:",
        reply_markup=get_paginated_keyboard(
            items=uni_names, page=0, data_prefix="uni", back_callback="back_to_uni_type", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_faculties")
async def back_to_faculties_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, universities_manager: UniversitiesGSheet):
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    
    uni_index = user_data.get("selected_university_index")
    selected_university = user_data.get("filtered_universities", [])[uni_index]
    unique_faculties = user_data.get("unique_faculties", []) 

    await state.set_state(Universities.choosing_faculty)
    await callback.message.edit_text(
        f"<b>{selected_university.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£')}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=get_paginated_keyboard(
            items=unique_faculties, page=0, data_prefix="faculty", back_callback="back_to_universities", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()
    
@router.callback_query(F.data == "back_to_programs")
async def back_to_programs_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')

    faculty_index = user_data.get("selected_faculty_index")
    selected_faculty_name = user_data.get("unique_faculties", [])[faculty_index]
    programs_in_faculty = user_data.get("programs_in_faculty", [])
    program_names = [p.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "N/A") for p in programs_in_faculty]

    await state.set_state(Universities.choosing_program)
    await callback.message.edit_text(
        f"<b>{selected_faculty_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=get_paginated_keyboard(
            items=program_names, page=0, data_prefix="program", back_callback="back_to_faculties", lexicon=lexicon, lang=lang
        )
    )
    await callback.answer()

# --- –ü–ê–ì–ò–ù–ê–¶–ò–Ø (–û–ë–©–ê–Ø) ---

@router.callback_query(F.data.startswith("page_"))
async def pagination_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    parts = callback.data.split('_')
    data_prefix = parts[1]
    page = int(parts[2])
    
    await state.update_data(page=page)
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')
    
    items_list = []
    back_callback = ""
    
    if data_prefix == 'uni':
        items_list = [uni.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –í–û–£", "N/A") for uni in user_data.get("filtered_universities", [])]
        back_callback = "back_to_uni_type"
    elif data_prefix == 'faculty':
        items_list = user_data.get("unique_faculties", [])
        back_callback = "back_to_universities"
    elif data_prefix == 'program':
        items_list = [p.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "N/A") for p in user_data.get("programs_in_faculty", [])]
        back_callback = "back_to_faculties"
    
    await callback.message.edit_reply_markup(
        reply_markup=get_paginated_keyboard(
            items=items_list, 
            page=page, 
            data_prefix=data_prefix, 
            back_callback=back_callback, 
            lexicon=lexicon, 
            lang=lang
        )
    )
    await callback.answer()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í ---

@router.callback_query(Universities.viewing_faculty, F.data.startswith("show_docs_"))
async def show_documents_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict): 
    try:
        program_index = int(callback.data.split("_", 2)[2])
        user_data = await state.get_data()
        lang = user_data.get('language', 'ru')
        
        program = user_data.get("programs_in_faculty", [])[program_index]
        documents_text = program.get("–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if documents_text:
            await callback.message.delete()
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
                text=lexicon[lang]['button-back'], 
                callback_data=f"program_{program_index}" 
            ))
            
            await callback.message.answer(documents_text, reply_markup=builder.as_markup())
            
        else:
            await callback.answer("–î–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω.", show_alert=True)
            
    except (ValueError, IndexError):
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)

    await callback.answer()

@router.callback_query(Universities.viewing_faculty, F.data.startswith("program_"))
async def back_to_program_card_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    await program_selected_handler(callback, state, lexicon)

