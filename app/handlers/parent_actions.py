from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.states.registration import ParentActions, StemNavigator
from app.utils.google_sheets import RegistrationGSheet
from app.keyboards.inline import get_about_test_keyboard
from app.keyboards.inline import get_parent_start_test_keyboard 
from app.handlers.stem_navigator import show_test_results

router = Router()

def get_children_keyboard(children: list, lexicon: dict, lang: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    builder = InlineKeyboardBuilder()
    for child in children:
        child_name = child.get('–ò–º—è —Ä–µ–±–µ–Ω–∫–∞', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')

        builder.row(types.InlineKeyboardButton(
            text=child_name,
            callback_data=f"select_child_{child_name}"
        ))
    builder.row(types.InlineKeyboardButton(
        text=lexicon[lang]['button-back'], 
        callback_data="back_to_main_menu" 
    ))
    return builder.as_markup()


@router.callback_query(F.data == "parent_start_test_selection")
async def select_child_for_test_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    """
    –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    lang = (await state.get_data()).get('language', 'ru')
    children = registration_manager.get_children_by_parent_id(callback.from_user.id)

    if not children:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.", show_alert=True)
        return

    await state.set_state(ParentActions.choosing_child_for_test)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –∏–∑ –¥–µ—Ç–µ–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç:",
        reply_markup=get_children_keyboard(children, lexicon, lang)
    )
    await callback.answer()


@router.callback_query(ParentActions.choosing_child_for_test, F.data.startswith("select_child_"))
async def start_test_for_child_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    """
    –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ —Ç–µ—Å—Ç—É –∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'.
    """
    child_name = callback.data.split('_', 2)[2]
    await state.update_data(test_for_child=child_name)
    
    lang = (await state.get_data()).get('language', 'ru')
    
    await state.set_state(StemNavigator.showing_test_info)

    parent_test_intro = lexicon[lang]['parent-about-test-text'].format(child_name=child_name)
    
    await callback.message.edit_text(
        text=parent_test_intro,
        reply_markup=get_about_test_keyboard(lexicon, lang) 
    )
    await callback.answer()

@router.message(F.text.in_({"üß≠ STEM-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", "üß≠ STEM-navigator"}))
async def parent_stem_navigator_start(message: types.Message, state: FSMContext, lexicon: dict):

    await message.delete()
    user_data = await state.get_data()
    lang = user_data.get('language', 'ru')

    if user_data.get("test_results"):
       
        mock_callback_message = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        mock_callback = types.CallbackQuery(
            id="mock_callback_id", from_user=message.from_user, chat_instance="",
            message=mock_callback_message, data="show_results"
        )
        await show_test_results(mock_callback, state, lexicon)
        
    else:
        intro_text = "–í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–ª—è —É—á—ë–±—ã."
        await message.answer(
            text=intro_text,
            reply_markup=get_parent_start_test_keyboard(lexicon, lang)
        )