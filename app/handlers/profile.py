# app/handlers/profile.py

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
from app.utils.google_sheets import RegistrationGSheet 
from app.states.registration import ProfileEditing, GeneralRegistration, ParentRegistration, StudentRegistration
from app.keyboards.inline import (
    get_profile_keyboard, get_edit_profile_choices_keyboard,
    get_children_list_keyboard, get_back_to_children_list_keyboard,
    get_language_keyboard, get_yes_no_keyboard,
    get_student_welcome_keyboard, get_profile_creation_keyboard 
)
from app.utils.helpers import calculate_age

router = Router()


# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–§–ò–õ–Ø ---

@router.message(F.text.in_({"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", "üë§ Profil"}))
async def profile_handler(message: types.Message, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    await message.delete()
    
    # --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    user_fsm_data = await state.get_data() # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å
    if menu_msg_id := user_fsm_data.get('main_menu_message_id'):
        try:
            await message.bot.delete_message(message.chat.id, menu_msg_id)
        except Exception:
            pass
    # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ ---
    
    lang = user_fsm_data.get('language', 'ru') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π lang
    user_data = registration_manager.get_user_by_id(message.from_user.id)

    if user_data:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ù–ê–ô–î–ï–ù –≤ Google-—Ç–∞–±–ª–∏—Ü–µ
        await state.set_state(ProfileEditing.showing_profile)
        await show_profile_screen(message, state, lexicon, lang, user_data, registration_manager)
    else:
        # --- (–ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω) ---
        
        role = user_fsm_data.get('role') # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ "–ü–æ–∑–∂–µ"

        # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ
        text = "–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —Ä–æ–ª—å –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
        if role == 'student':
            # –ö–Ω–æ–ø–∫–∏ "–î–∞, –¥–∞–≤–∞–π" –∏ "–ü–æ–∑–∂–µ"
            await state.set_state(StudentRegistration.confirming_creation)
            await message.answer(
                text=text,
                reply_markup=get_student_welcome_keyboard(lexicon=lexicon, lang=lang)
            )
        elif role == 'parent':
             # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç "–ü–æ–∑–∂–µ"
            await state.set_state(ParentRegistration.confirming_creation)
            await message.answer(
                text=text, 
                reply_markup=get_profile_creation_keyboard(lexicon=lexicon, lang=lang)
            )
        else:
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª /start), –Ω–∞—á–∏–Ω–∞–µ–º —Å —è–∑—ã–∫–∞
            await state.set_state(GeneralRegistration.choosing_language)
            await message.answer(
                text="–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=get_language_keyboard()
            )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ú–û–ò –î–ï–¢–ò"  ---
@router.message(F.text.in_({"üë§ –ú–æ–∏ –¥–µ—Ç–∏", "üë§ Mening farzandlarim"}))
async def my_children_handler(message: types.Message, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    await message.delete()
    
    # --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    user_fsm_data = await state.get_data()
    if menu_msg_id := user_fsm_data.get('main_menu_message_id'):
        try:
            await message.bot.delete_message(message.chat.id, menu_msg_id)
        except Exception:
            pass
    # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ ---

    lang = user_fsm_data.get('language', 'ru')
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å
    user_data = registration_manager.get_user_by_id(message.from_user.id)
    if not (user_data and user_data.get('role') == 'parent'):

        role = user_fsm_data.get('role')
        text = "–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!"
        
        if role == 'parent':
            await state.set_state(ParentRegistration.confirming_creation)
            await message.answer(
                text=text, 
                reply_markup=get_profile_creation_keyboard(lexicon=lexicon, lang=lang)
            )
        else:
             await state.set_state(GeneralRegistration.choosing_language)
             await message.answer(
                text="–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=get_language_keyboard()
             )
        return

    # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–æ–¥–∏—Ç–µ–ª—å. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π.
    await state.set_state(ProfileEditing.managing_children)
    
    # --- –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ `show_children_list` –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ ---
    children = registration_manager.get_children_by_parent_id(message.from_user.id)
    
    if children:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            lexicon[lang]['my-children-list-title'],
            reply_markup=get_children_list_keyboard(children, lexicon, lang)
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥" (–≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ)
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text=lexicon[lang].get('button-add-child', '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'),
            callback_data="add_child_from_profile"
        ))

        builder.row(types.InlineKeyboardButton(
            text=lexicon[lang]['button-back'],
            callback_data="back_to_main_menu"
        ))
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=builder.as_markup()
        )


# --- –•–ï–õ–ü–ï–†–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ---

async def show_profile_screen(
    message: types.Message | types.CallbackQuery, 
    state: FSMContext, 
    lexicon: dict, 
    lang: str, 
    user_data: dict, 
    registration_manager: RegistrationGSheet
):

    target_message = message if isinstance(message, types.Message) else message.message
    bot = message.bot

    if isinstance(message, types.CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_message = message.message
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ message (–æ—Ç /profile), –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        target_message = message
        # –ò —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ (–∫–æ–º–∞–Ω–¥—É /profile)
        try: await message.delete()
        except: pass
    

    async def send_or_edit(text, reply_markup, parse_mode):
        try:
            await target_message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except:
            await bot.send_message(target_message.chat.id, text, reply_markup=reply_markup, parse_mode=parse_mode)

            
    user_role = user_data.get('role')

    if user_role == 'parent':
        text = lexicon[lang]['profile-parent-display'].format(
            first_name=user_data.get('–ò–º—è'),
            last_name=user_data.get('–§–∞–º–∏–ª–∏—è'),
            phone=user_data.get('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
            email=user_data.get('Email') or "–ù–µ —É–∫–∞–∑–∞–Ω"
        )
        keyboard = get_profile_keyboard(lexicon, lang, is_parent=True)
        await send_or_edit(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif user_role == 'student':
        parent_contact = registration_manager.get_student_parent_contact(user_data.get('Telegram ID'))
        age = calculate_age(user_data.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'))
        text = lexicon[lang]['profile-student-display'].format(
            first_name=user_data.get('–ò–º—è'),
            last_name=user_data.get('–§–∞–º–∏–ª–∏—è'),
            dob=user_data.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'), age=age or 'N/A', 
            phone=user_data.get('–¢–µ–ª–µ—Ñ–æ–Ω') or "–ù–µ —É–∫–∞–∑–∞–Ω",
            city=user_data.get('–ì–æ—Ä–æ–¥'), 
            parent_contact=parent_contact or "–ù–µ —É–∫–∞–∑–∞–Ω"
        )
        keyboard = get_profile_keyboard(lexicon, lang, is_parent=False)
        await send_or_edit(text, reply_markup=keyboard, parse_mode="Markdown")
        
    else:
        await target_message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start")

async def show_children_list(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, lang: str, registration_manager: RegistrationGSheet):

    children = registration_manager.get_children_by_parent_id(callback.from_user.id)
    
    if children:
        await callback.message.edit_text(
            lexicon[lang]['my-children-list-title'],
            reply_markup=get_children_list_keyboard(children, lexicon, lang)
        )
    else:
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text=lexicon[lang].get('button-add-child', '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞'),
            callback_data="add_child_from_profile"
        ))
        # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –æ–Ω–∞ –≤–µ–¥–µ—Ç –≤ "–ü—Ä–æ—Ñ–∏–ª—å"
        builder.row(types.InlineKeyboardButton(
            text=lexicon[lang]['button-back'],
            callback_data="back_to_profile_view" 
        ))
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
            reply_markup=builder.as_markup()
        )

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–¢–¨–ú–ò (–î–õ–Ø –†–û–î–ò–¢–ï–õ–Ø) ---

@router.callback_query(ProfileEditing.showing_profile, F.data == "manage_children_action")
async def manage_children_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    await state.set_state(ProfileEditing.managing_children)
    await show_children_list(callback, state, lexicon, lang, registration_manager)
    await callback.answer()

@router.callback_query(ProfileEditing.managing_children, F.data.startswith("view_child_"))
async def view_child_details_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    try:
        child_index = int(callback.data.split("_")[2])
        lang = (await state.get_data()).get('language', 'ru')
        
        children = registration_manager.get_children_by_parent_id(callback.from_user.id)
        child = children[child_index]

        if child:
            age = calculate_age(child.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'))
            child_name = f"{child.get('–ò–º—è —Ä–µ–±–µ–Ω–∫–∞', '')} {child.get('–§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞', '')}".strip()
            
            text = lexicon[lang]['child-details-display'].format(
                first_name=child.get('–ò–º—è —Ä–µ–±–µ–Ω–∫–∞', ''), 
                last_name=child.get('–§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞', ''),
                dob=child.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'), age=age or 'N/A', 
                city=child.get('–ì–æ—Ä–æ–¥', '–Ω–µ —É–∫–∞–∑–∞–Ω'), interests=child.get('–ò–Ω—Ç–µ—Ä–µ—Å—ã', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'), 
                courses="–ü–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã"
            )
            await state.set_state(ProfileEditing.viewing_child_details)
            await callback.message.edit_text(text, reply_markup=get_back_to_children_list_keyboard(lexicon, lang))
    except (ValueError, IndexError):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    await callback.answer()

@router.callback_query(ProfileEditing.viewing_child_details, F.data == "back_to_children_list")
async def back_to_children_list_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    await state.set_state(ProfileEditing.managing_children)
    await show_children_list(callback, state, lexicon, lang, registration_manager)
    await callback.answer()

@router.callback_query(ProfileEditing.managing_children, F.data == "add_child_from_profile")
async def add_child_from_profile_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    lang = (await state.get_data()).get('language', 'ru')
    await state.set_state(ParentRegistration.asking_child_registered)
    await callback.message.edit_text(
        lexicon[lang]['is-child-registered-prompt'],
        reply_markup=get_yes_no_keyboard(lexicon, lang)
    )
    await callback.answer()

# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ---

@router.callback_query(ProfileEditing.showing_profile, F.data == "edit_profile_action")
async def edit_profile_action_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    user_data = registration_manager.get_user_by_id(callback.from_user.id)
    is_parent = user_data and user_data.get('role') == 'parent'

    await state.set_state(ProfileEditing.choosing_field_to_edit)
    await callback.message.edit_text(
        lexicon[lang]['profile-edit-prompt'],
        reply_markup=get_edit_profile_choices_keyboard(lexicon, lang, is_parent)
    )
    await callback.answer()

@router.callback_query(ProfileEditing.choosing_field_to_edit, F.data.startswith("edit_field_"))
async def edit_field_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    # edit_field_parent_–ò–º—è –∏–ª–∏ edit_field_student_–ò–º—è
    parts = callback.data.split("_", 3)
    role_prefix = parts[2] # 'parent' –∏–ª–∏ 'student'
    field_to_edit = parts[3] # '–ò–º—è'
    
    await state.set_state(ProfileEditing.editing_field)
    await state.update_data(field_to_edit=field_to_edit, role_prefix_for_edit=role_prefix)
    
    lang = (await state.get_data()).get('language', 'ru')
    prompt_text = lexicon[lang].get('prompt-enter-new-name', "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:") # –ó–∞–ø–∞—Å–Ω–æ–π —Ç–µ–∫—Å—Ç
    
    # –ü–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if field_to_edit == "–ò–º—è" or field_to_edit == "–§–∞–º–∏–ª–∏—è":
        prompt_text = lexicon[lang]['prompt-enter-new-name']
    elif "–¢–µ–ª–µ—Ñ–æ–Ω" in field_to_edit:
        prompt_text = lexicon[lang]['prompt-enter-new-phone']
    elif field_to_edit == "Email":
        prompt_text = lexicon[lang]['prompt-enter-new-email']
    elif "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" in field_to_edit:
         prompt_text = lexicon[lang]['prompt-enter-new-age']
    elif field_to_edit == "–ì–æ—Ä–æ–¥":
         prompt_text = lexicon[lang]['prompt-enter-new-city']

    await callback.message.edit_text(prompt_text)
    await callback.answer()

@router.message(ProfileEditing.editing_field)
async def save_edited_field_handler(message: types.Message, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    user_data_from_state = await state.get_data()
    field_to_edit = user_data_from_state.get('field_to_edit')
    new_value = message.text.strip()
    
    await message.delete()

    success = registration_manager.update_user_data(
        user_id=message.from_user.id,
        field_name=field_to_edit,
        new_value=new_value
    )
    
    updated_user_data = registration_manager.get_user_by_id(message.from_user.id)

    if success and updated_user_data:
        # –ü–µ—Ä–µ–¥–∞–µ–º registration_manager –¥–∞–ª—å—à–µ
        await show_profile_screen(message, state, lexicon, lang, updated_user_data, registration_manager)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ö–ù–û–ü–ö–ê "–ù–ê–ó–ê–î" ---

@router.callback_query(F.data == "back_to_profile_view")
async def back_to_profile_view_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, registration_manager: RegistrationGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    user_data = registration_manager.get_user_by_id(callback.from_user.id)
    if user_data:
        await state.set_state(ProfileEditing.showing_profile)
        # –ü–µ—Ä–µ–¥–∞–µ–º registration_manager –¥–∞–ª—å—à–µ
        await show_profile_screen(callback, state, lexicon, lang, user_data, registration_manager)
    await callback.answer()

@router.callback_query(ProfileEditing.showing_profile, F.data == "my_courses_action")
async def my_courses_stub_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    lang = (await state.get_data()).get('language', 'ru')
    await callback.answer(lexicon[lang]['coming-soon'], show_alert=True)


