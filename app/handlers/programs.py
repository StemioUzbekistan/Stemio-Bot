from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from app.states.registration import Programs
from app.utils.google_sheets import CoursesGSheet
from app.keyboards.inline import (
    get_course_categories_keyboard,
    get_course_subcategories_keyboard,
    get_specific_courses_keyboard,
    get_course_card_keyboard
)

router = Router()

# --- –®–ê–ì 1: –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞) ---

@router.message(F.text.in_({"üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è", "üìö O'quv dasturlari"}))
async def programs_start_handler(message: types.Message, state: FSMContext, lexicon: dict, courses_manager: CoursesGSheet):
    await message.delete()
    
    user_data = await state.get_data()
    if menu_msg_id := user_data.get('main_menu_message_id'):
        try:
            await message.bot.delete_message(message.chat.id, menu_msg_id)
        except Exception:
            pass 
    lang = (await state.get_data()).get('language', 'ru')
    
    all_courses = courses_manager.get_courses()
    if not all_courses:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    categories = sorted(list(set(c['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] for c in all_courses if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'))))
    
    await state.set_state(Programs.choosing_direction)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_course_categories_keyboard(categories, lexicon, lang)
    )

# --- –®–ê–ì 2: –£–ú–ù–´–ô –í–´–ë–û–† –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò ---

@router.callback_query(Programs.choosing_direction, F.data.startswith("category_"))
async def category_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, courses_manager: CoursesGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    selected_category = callback.data.split('_', 1)[1]
    
    await state.update_data(selected_category=selected_category)
    all_courses = courses_manager.get_courses()
    
    subcategories = sorted(list(set(
        c['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] for c in all_courses 
        if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_category and c.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    )))

    if len(subcategories) == 1:
        selected_subcategory = subcategories[0]
        await state.update_data(selected_subcategory=selected_subcategory)

        specific_courses = [
            c for c in all_courses 
            if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_category 
            and c.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_subcategory
            and c.get('language') == lang
        ]
        
        await state.update_data(specific_courses_list=specific_courses)
        await state.set_state(Programs.choosing_course)
        
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_category}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
            reply_markup=get_specific_courses_keyboard(specific_courses, lexicon, lang)
        )

    else:
        await state.set_state(Programs.choosing_subcategory)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_category}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=get_course_subcategories_keyboard(subcategories, lexicon, lang)
        )
    
    await callback.answer()

# --- –®–ê–ì 3: –í–´–ë–û–† –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ö–£–†–°–ê ---
@router.callback_query(Programs.choosing_subcategory, F.data.startswith("subcategory_"))
async def subcategory_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, courses_manager: CoursesGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    selected_subcategory = callback.data.split('_', 1)[1]
    
    user_data = await state.get_data()
    selected_category = user_data.get('selected_category')

    await state.update_data(selected_subcategory=selected_subcategory)
    all_courses = courses_manager.get_courses()

    specific_courses = [
        c for c in all_courses 
        if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_category 
        and c.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_subcategory
        and c.get('language') == lang
    ]
    
    await state.update_data(specific_courses_list=specific_courses)
    await state.set_state(Programs.choosing_course)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_subcategory}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=get_specific_courses_keyboard(specific_courses, lexicon, lang)
    )
    await callback.answer()

# --- –®–ê–ì 4: –ü–û–ö–ê–ó –ö–ê–†–¢–û–ß–ö–ò –ö–£–†–°–ê ---
@router.callback_query(Programs.choosing_course, F.data.startswith("course_"))
async def course_selected_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    lang = (await state.get_data()).get('language', 'ru')
    course_index = int(callback.data.split('_', 1)[1])
    user_data = await state.get_data()
    specific_courses = user_data.get('specific_courses_list', [])
    target_course = specific_courses[course_index]

    await state.set_state(Programs.viewing_course)
    
    card_text = (
        f"<b>{target_course.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n\n"
        f"{target_course.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ.')}\n\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {target_course.get('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')}\n"
        f"<b>–¶–µ–Ω–∞:</b> {target_course.get('–¶–µ–Ω–∞')}"
    )
    
    course_id = target_course.get('course_id', 'unknown') 

    await callback.message.edit_text(
        card_text,
        reply_markup=get_course_card_keyboard(lexicon, lang, course_id)
    )
    await callback.answer()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö "–ù–ê–ó–ê–î" ---
@router.callback_query(F.data == "back_to_categories")
async def back_to_categories_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, courses_manager: CoursesGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    all_courses = courses_manager.get_courses()
    categories = sorted(list(set(c['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] for c in all_courses if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'))))
    await state.set_state(Programs.choosing_direction)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_course_categories_keyboard(categories, lexicon, lang)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_subcategories")
async def back_to_subcategories_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict, courses_manager: CoursesGSheet):
    lang = (await state.get_data()).get('language', 'ru')
    user_data = await state.get_data()
    selected_category = user_data.get('selected_category')

    all_courses = courses_manager.get_courses()
    subcategories = sorted(list(set(
        c['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] for c in all_courses 
        if c.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') == selected_category and c.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    )))

    if len(subcategories) <= 1:
        await back_to_categories_handler(callback, state, lexicon, courses_manager)
    else:
        await state.set_state(Programs.choosing_subcategory)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_category}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=get_course_subcategories_keyboard(subcategories, lexicon, lang)
        )
        await callback.answer()

# –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ö–ù–û–ü–ö–ò "–ó–ê–ü–ò–°–ê–¢–¨–°–Ø"
@router.callback_query(Programs.viewing_course, F.data.startswith("enroll_"))
async def enroll_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å! –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.", show_alert=True)

