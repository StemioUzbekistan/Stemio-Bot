import collections
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.states.registration import StemNavigator
from app.utils.google_sheets import ProfessionsGSheet
from app.utils.test_content import QUESTIONS, SCORING_KEY, SCALES_INFO

router = Router()

# ---  –°–ü–ò–°–ö–ò –ü–û–õ–ï–ô  ---
PRIMARY_FIELDS = [
    "–û —á—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?",
    "–ß–µ–º –∑–∞–Ω–∏–º–∞—é—Ç—Å—è?",
    "–ö–∞–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –Ω—É–∂–Ω–æ –æ–±–ª–∞–¥–∞—Ç—å",
    "–ì–¥–µ —É—á–∏—Ç—å—Å—è",
    "–§–∞–∫—É–ª—å—Ç–µ—Ç—ã"
]
ADDITIONAL_FIELDS = [
    "–ñ–∏–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã",
    "–ì–¥–µ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å",
    "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç",
    "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
    "–°–º–µ–∂–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
    "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
    "–†–∞–±–æ—á–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞",
    "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏",
    "–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
]


# --- –•–ï–õ–ü–ï–†–´ ---

def calculate_results(answers: list[str]) -> list[tuple[str, int]]:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞."""
    scores = collections.defaultdict(int)
    for answer in answers:
        for scale, keys in SCORING_KEY.items():
            if answer in keys:
                scores[scale] += 1
    
    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)
    return sorted_scores[:3]


def get_about_test_keyboard(lexicon: dict, lang: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Ä–∞–Ω–∞ '–û —Ç–µ—Å—Ç–µ'."""
    kb_lang = lexicon.get(lang, {})
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text=kb_lang.get('button-start-test', 'üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'),
        callback_data="begin_stem_test"
    ))
    builder.row(types.InlineKeyboardButton(
        text=kb_lang.get('button-main-menu', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        callback_data="back_to_main_menu"
    ))
    return builder.as_markup()


async def show_test_results(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    user_data = await state.get_data()
    lang = (await state.get_data()).get('language', 'ru')
    top_3_results = user_data.get("test_results") 

    if not top_3_results:
        answers = user_data.get("answers", [])
        if not answers:
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="begin_stem_test"))
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
            return
            
        top_3_results = calculate_results(answers)
        await state.update_data(test_results=top_3_results) 

    # --- –ë–õ–û–ö –°–ë–û–†–ö–ò –¢–ï–ö–°–¢–ê ---

    result_text = lexicon[lang].get('test_result_title', "üåü <b>–í–æ—Ç —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n")
    
    emojis = ["ü•á 1 –º–µ—Å—Ç–æ:", "ü•à 2 –º–µ—Å—Ç–æ:", "ü•â 3 –º–µ—Å—Ç–æ:"]
    result_builder = InlineKeyboardBuilder()
    
    for i, (scale_key, score) in enumerate(top_3_results):
        scale_info = SCALES_INFO[scale_key] 
        scale_description = scale_info['description']
        
        result_text += f"{emojis[i]} <b>{scale_info['title']}</b>\n"
        result_text += f"{scale_description}\n\n" 
        
        result_builder.row(types.InlineKeyboardButton(
            text=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {scale_info['title']}",
            callback_data=f"view_directions_{scale_key}" 
        ))
    
    result_text += lexicon[lang].get('test_result_footer', "") # <-- –í–û–¢ –û–ù

    result_builder.row(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="begin_stem_test"))
    result_builder.row(types.InlineKeyboardButton(
        text=lexicon[lang].get('button-main-menu', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), 
        callback_data="back_to_main_menu"
    ))
    
    await callback.message.edit_text(result_text, reply_markup=result_builder.as_markup())
    await state.set_state(StemNavigator.viewing_results)
    


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–°–¢–ê ---

@router.callback_query(F.data == "begin_stem_test")
async def start_test_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç (–≤–æ–ø—Ä–æ—Å 1)."""
    try:
        await callback.message.delete()
    except Exception:
        pass

    await state.set_state(StemNavigator.taking_test)
    await state.update_data(question_index=0, answers=[], test_results=None)
    
    question = QUESTIONS[0]
    builder = InlineKeyboardBuilder()
    for answer in question["answers"]:
        builder.add(types.InlineKeyboardButton(text=answer["text"], callback_data=answer["data"]))
    builder.adjust(1)

    await callback.message.answer(question["text"], reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(StemNavigator.taking_test)
async def answer_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    user_data = await state.get_data()
    answers = user_data.get("answers", [])
    answers.append(callback.data)
    
    question_index = user_data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index, answers=answers)
    
    if question_index < len(QUESTIONS):
        question = QUESTIONS[question_index]
        builder = InlineKeyboardBuilder()
        for answer in question["answers"]:
            builder.add(types.InlineKeyboardButton(text=answer["text"], callback_data=answer["data"]))
        builder.adjust(1)
        await callback.message.edit_text(question["text"], reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text("‚è≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        await show_test_results(callback, state, lexicon)

    await callback.answer()


# --- –õ–û–ì–ò–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ü–†–û–§–ï–°–°–ò–Ø–ú ---

@router.callback_query(StemNavigator.viewing_results, F.data.startswith("view_directions_"))
async def view_directions_handler(callback: types.CallbackQuery, state: FSMContext, professions_manager: ProfessionsGSheet):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' (e.g. '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ') –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∫–∞–ª—ã (e.g. 'human')."""
    scale_key = callback.data.replace("view_directions_", "")

    professions = professions_manager.get_professions_by_scale(scale_key)
    
    if not professions:
        await callback.answer("–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return

    directions = sorted(list(set(prof.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') for prof in professions if prof.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'))))

    await state.update_data(
        current_scale_key=scale_key,
        current_directions=directions,
        current_scale_professions=professions 
    )
    
    builder = InlineKeyboardBuilder()
    for index, direction in enumerate(directions):
        builder.row(types.InlineKeyboardButton(text=direction, callback_data=f"view_profs_{index}"))
    
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"))
    
    await callback.message.edit_text(
        f"<b>{SCALES_INFO[scale_key]['title']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(StemNavigator.viewing_results, F.data.startswith("view_profs_"))
async def view_professions_handler(callback: types.CallbackQuery, state: FSMContext, professions_manager: ProfessionsGSheet):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (e.g. '–í—Ä–∞—á') –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    direction_index = int(callback.data.replace("view_profs_", ""))

    user_data = await state.get_data()
    directions = user_data.get('current_directions', [])
    direction = directions[direction_index]
    
    all_professions_in_scale = user_data.get('current_scale_professions', [])
    scale_key = user_data.get('current_scale_key')
    
    filtered_professions = [prof for prof in all_professions_in_scale if prof.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') == direction]
    
    await state.update_data(current_filtered_professions=filtered_professions)

    builder = InlineKeyboardBuilder()
    for index, prof in enumerate(filtered_professions):
        builder.row(types.InlineKeyboardButton(
            text=prof.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'),
            callback_data=f"show_prof_{index}" 
        ))
    
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data=f"view_directions_{scale_key}"))
    
    await callback.message.edit_text(
        f"<b>{direction}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(
    F.data.startswith("show_prof_"),
    StemNavigator.viewing_results 
)
async def show_profession_card_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ö–û–†–û–¢–ö–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."""
    prof_index = int(callback.data.replace("show_prof_", ""))

    user_data = await state.get_data()

    filtered_professions = user_data.get('current_filtered_professions', [])

    if not filtered_professions or prof_index >= len(filtered_professions):
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)

        await show_test_results(callback, state, lexicon=await state.get_data().get('lexicon', {}))
        return
        
    profession = filtered_professions[prof_index]
    
    direction = profession.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    directions = user_data.get('current_directions', [])
    direction_index = directions.index(direction) if direction in directions else 0

    card_text = f"<b>{profession.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏')}</b>\n\n"
    for field in PRIMARY_FIELDS:
        if value := profession.get(field):
            card_text += f"<b>{field}:</b> {value}\n"
            
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üìÑ –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
        callback_data=f"show_full_{prof_index}" 
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º", 
        callback_data=f"view_profs_{direction_index}" 
    ))
    
    await state.set_state(StemNavigator.viewing_results) 
    await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(StemNavigator.viewing_results, F.data.startswith("show_full_"))
async def show_full_profession_card_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–û–õ–ù–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."""
    prof_index = int(callback.data.replace("show_full_", ""))
    
    user_data = await state.get_data()
    filtered_professions = user_data.get('current_filtered_professions', [])

    if not filtered_professions or prof_index >= len(filtered_professions):
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)

        await show_test_results(callback, state, lexicon=await state.get_data().get('lexicon', {}))
        return
        
    profession = filtered_professions[prof_index]

    direction = profession.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    directions = user_data.get('current_directions', [])
    direction_index = directions.index(direction) if direction in directions else 0

    card_text = f"<b>{profession.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏')}</b>\n\n"
    all_fields = PRIMARY_FIELDS + ADDITIONAL_FIELDS
    for field in all_fields:
        if value := profession.get(field):
            card_text += f"<b>{field}:</b> {value}\n\n"

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üîº –°–∫—Ä—ã—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        callback_data=f"show_prof_{prof_index}" 
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º", 
        callback_data=f"view_profs_{direction_index}"
    ))

    await callback.message.edit_text(card_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(StemNavigator.viewing_results, F.data == "back_to_results")
async def back_to_results_handler(callback: types.CallbackQuery, state: FSMContext, lexicon: dict):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞."""
    await show_test_results(callback, state, lexicon)
    await callback.answer()

@router.message(F.text.in_({"üß≠ STEM-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", "üß≠ STEM-navigator"}))
async def student_stem_navigator_start(message: types.Message, state: FSMContext, lexicon: dict):
    await message.delete()

    user_data = await state.get_data()
    if menu_msg_id := user_data.get('main_menu_message_id'):
        try:
            await message.bot.delete_message(message.chat.id, menu_msg_id)
        except Exception:
            pass

    lang = user_data.get('language', 'ru')

    if user_data.get("test_results"):
        mock_callback_message = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        mock_callback = types.CallbackQuery(
            id="mock_callback_id_student", from_user=message.from_user, chat_instance="",
            message=mock_callback_message, data="show_results"
        )
        
        await show_test_results(mock_callback, state, lexicon)
        
    else:
        await state.set_state(StemNavigator.showing_test_info)
        await message.answer(
            text=lexicon[lang]['about-test-text'],
            reply_markup=get_about_test_keyboard(lexicon, lang)
        )

